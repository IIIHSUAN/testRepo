;
(function (window, document) {
    'use strict';

    //// IE 8 support 'Array.forEach'
    if (!Array.prototype.forEach) {
        Array.prototype.forEach = function (callback, thisArg) {
            var t;
            if (this === null) {
                throw new TypeError(' this is null or not defined');
            }
            var o = Object(this);
            var len = o.length >>> 0; // Hack to convert O.length to a UInt32
            if ({}.toString.call(callback) !== '[object Function]') {
                throw new TypeError('callback is not a function');
            }
            if (thisArg) {
                t = thisArg;
            }
            var k = 0;
            while (k < len) {
                var kValue;
                if (k in o) {
                    kValue = o[k];
                    callback.call(t, kValue, k, o);
                }
            }
        };
    }

    //// IE 8 support 'Array.indexOf'
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (obj, start) {
            for (var i = start || 0, j = this.length; i < j; i++) {
                if (this[i] === obj) {
                    return i;
                }
            }
            return -1;
        };
    }

    //// IE 8 support 'Array.isArray'
    if (!Array.isArray) {
        Array.isArray = function (obj) {
            return Object.prototype.toString.call(obj) === '[object Array]';
        };
    }

    //// IE 8 support 'String.trimEnd'
    if (!String.prototype.trimEnd) {
        String.prototype.trimEnd = function () {
            return this.replace(/\s+$/, '');
        };
    }

    //// 停止瀏覽器冒泡行為
    if (!window.stopBubble) {
        /**
        * 停止瀏覽器冒泡行為
        * @param {Event} e Event (Click)
        */
        window.stopBubble = function (e) {
            if (e && e.stopPropagation) {
                //// 標準技術 (W3C)
                e.stopPropagation();
            } else {
                //// IE
                window.event.cancelBubble = true;
            }
        };
    }

    //// 阻止瀏覽器默認行為
    if (!window.stopDefault) {
        /**
         * 阻止瀏覽器默認行為
         * @param {Event} e Event (Click)
         * @return {Boolean} 阻止瀏覽器默認行為
         */
        window.stopDefault = function (e) {
            if (e && e.preventDefault) {
                // 標準技術 (W3C)
                e.preventDefault();
            } else {
                // IE
                window.event.returnValue = false;
            }
            return false;
        };
    }

    //// 物件加入唯獨值
    if (!window.addObjectValue) {
        /**
        * 物件加入唯獨值
        * @param {Object} obj 來源物件
        * @param {String} key Key
        * @param {String} value Value
        */
        window.addObjectValue = function (obj, key, value) {
            let options = addObjectValue.d ||
                (
                    addObjectValue.d = {
                        enumerable: false,
                        writable: false,
                        configurable: false,
                        value: null
                    }
                );
            options.value = value;
            Object.defineProperty(obj, key, options);
        };
    }

    //// String interpolation 模板字串
    if (!window.stringRender) {
        //// 用法: stringRender('字串', { key: value, key2: value2 }, [ture/false])
        /**
        * String interpolation 模板字串
        * @param {String} template 來源模板字串 {{key}}
        * @param {Object} context 替換值 { key: value }
        * @param {Boolean} isNoMatchEmpty 沒有對應的參數值是否替換成空字串，否則顯示 {{參數}}
        * @returns {String} String
        */
        window.stringRender = function (template, context, isNoMatchEmpty) {
            return template.replace(/\{\{(.*?)\}\}/g, function (match, key) {
                if (isNoMatchEmpty) {
                    match = '';
                }
                let text = context[key];
                return !text && text !== 0 ? match : text.toString();
            });
        };
    }

    //// String Format 模板字串
    if (!window.stringFormat) {
        //// 用法: stringFormat('字串{0}{1}{2}',arg1, arg2, arg3)
        ////
        /**
        * String Format 模板字串
        * @param {String} str 來源模板字串 {0}{1}...
        * @returns {String} String
        */
        window.stringFormat = function (str) {
            for (let i = 1, l = arguments.length; i < l; ++i) {
                let format = '{' + i + '}';
                let arg = arguments[i] || format;
                str = str.replace(format, arg);
            }

            return str;
        };
    }

    //// 延遲執行方法
    if (!window.throttle) {
        //// 用法: throttle(foo, 1000); // 執行方法
        /**
        * 普通節流函數方法
        * @param {Function} fn 延遲調用函數
        * @param {Number} delay 延遲時間
        */
        window.throttle = function (fn, delay) {
            let time = delay || 35;
            if (fn._id) {
                clearTimeout(fn._id);
            }
            fn._id = window.setTimeout(function () {
                fn();
                fn._id = null;
            }, time);
        };
    }

    //// 延遲執行方法 (可傳參數)
    if (!window.throttleClosure) {
        //// 用法:
        //// function foo(arg1, arg2) { }     // 定義方法
        //// foo.delay = 1000;                // 設定延遲時間
        //// var func = throttleClosure(foo); // 閉包方法
        //// func(arg, arg1);                 // 執行方法
        /**
        * 閉包節流函數方法 (可傳參數)
        * @param {Function} fn 延遲調用函數
        * @return {Function} 延遲執行的方法
        */
        window.throttleClosure = function (fn) {
            let delay = fn.delay || 35;
            let timer = null;
            let args = Array.prototype.slice.call(arguments);
            args.shift();

            return function () {
                args = args.concat(Array.prototype.slice.call(arguments));
                clearTimeout(timer);
                timer = setTimeout(function () {
                    fn.apply(this, args);
                }, delay);
            };
        };
    }
})(window, document);