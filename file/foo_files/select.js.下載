; (function ($, window, document, undefined) {
    'use strict';

    /**
     * Cascading Constructor
     * @param {Array} records Select option data
     * @param {Object} container HTML element
     * @param {(Object|string)} options User settings
     * @constructor
     */
    function Chained(records, container, options) {
        var defaults = {};

        this.options = $.extend({}, defaults, options);
        this.callbacks = this.options.callbacks || {};
        this.records = records;
        this.container = $(container);
        this.init();
    }

    Chained.prototype = {
        /**
         * Method: Get all post data
         * @return {Object} function
         */
        data: function () {
            var wrap = this.wrap;
            return 'undefined' !== typeof data[wrap.county.val()] ?
                data[wrap.county.val()] :
                data;
        },
        /**
         * Method: Set value for elements.
         * @param {(string|number|Object)} opts Input value
         * @return {Funciton} this
         */
        set: function (opts) {
            var self = this,
                def = {
                    'county': '',
                    'town': '',
                    'zipcode': ''
                },
                opt = $.extend({}, def, opts);

            try {
                if ('string' === typeof opts || 'number' === typeof opts) {
                    self.wrap.zipcode.val(opts).trigger('blur.Chained');
                } else {
                    if (opt.zipcode) {
                        self.wrap.zipcode.val(opt.zipcode).trigger('blur.Chained');
                    }
                    if (opt.county) {
                        self.wrap.county.val(opt.county).trigger('change.Chained');
                    }
                    if (opt.town) {
                        self.wrap.town.val(opt.town).trigger('change.Chained');
                    }
                }
            } catch (ignore) {
                console.warn(ignore.message);
            } finally {
                return self.container;
            }
        },
        /**
         * Method: Reset the selected items to default.
         * @param {int} container html
         */
        reset: function (container) {
            var self = this;
            var wrap = self.wrap;
            if (container) {
                if (wrap[container]) {
                    wrap[container].select.options.length = wrap[container].default;
                }
            } else {
                for (var i = 0; i < wrap.length; i++) {
                    wrap[i].select.options.length = wrap[i].default;
                }

                let first = self.records.filter(function (element) {
                    return !element.ParentId;
                });
                first.forEach(function (item) {
                    wrap[0].select.options.add(new Option(item.Text, item.Id));
                });
                self.execCallback('afterResetAll');
            }
        },
        /**
         * Binding the event of the elements
         * @this {Chained}
         */
        bindings: function () {
            var self = this;
            var wrap = self.wrap;

            for (var i = 0; i < wrap.length; i++) {
                wrap[i].$select.on('change.chained', function () {
                    let val = $(this).val();
                    let seq = this.seq;
                    let next = seq + 1;
                    self.reset(next);
                    if (val) {
                        if (wrap[next]) {
                            let result = self.records.filter(function (element) {
                                let key = this;
                                return element.ParentId === key;
                            }, val);
                            result.forEach(function (item) {
                                wrap[next].select.options.add(new Option(item.Text, item.Id));
                            });
                            wrap[next].$select.trigger('change.chained');
                        }
                    } else {
                        wrap[seq].$select.find('option:first').prop('selected', true);
                    }

                    self.execCallback('afterOnChange', this);
                });
            }
        },
        execCallback: function () {
            var name = arguments[0];

            if (this.callbacks[name]) {
                this.callbacks[name].apply(this, Array.prototype.slice.call(arguments, 1));
            }
        },
        addCallback: function (name, fns) {
            if (name && fns) {
                this.callbacks[name] = fns;
            }
        },
        init: function () {
            var self = this;
            var container = self.container;
            var opts = self.options;
            var role = container.find('select');
            if (!role.length) {
                return;
            }
            self.wrap = [];
            for (var i = 0; i < role.length; i++) {
                self.wrap.push({});
                role[i].seq = i;
                self.wrap[i].default = role[i].length;
                self.wrap[i].$select = $(role[i]);
                self.wrap[i].select = role[i];
            }

            self.reset();
            self.bindings();
            self.execCallback('afterAddRecords');
        }
    };

    var ChainedSelect = function (records, container, options) {
        var chained = new Chained(records, container, options);
        return chained;
    };

    window.ChainedSelect = ChainedSelect;
})(window.jQuery || {}, window, document);
//#EOF
